layout (triangles) in;
layout (triangle_strip, max_vertices = 3) out;

layout(std140) uniform model_data {
	mat4 modelViewMatrix;
	mat4 modelMatrix;
	mat4 viewMatrix;
	mat4 projMatrix;
	mat4 textureMatrix;
	mat4 envMatrix;
	vec4 color;
	vec4 fogColor;
	float fogStart;
	float fogScale;
	int buffer_matrix_offset;
	mat4 shadow_proj_matrix[4];
	mat4 shadow_mv_matrix;
	float znear;
	float zfar;
	float veryneardist;
	float neardist;
	float middist;
	float fardist;
	float thruster_scale;
	int use_clip_plane;
	vec3 clip_normal;
	vec3 clip_position;
	vec2 normalAlphaMinMax;
	float extrudeWidth;
	float defaultGloss;
	vec3 ambientFactor;
	vec3 diffuseFactor;
	vec3 emissionFactor;
	int desaturate;
	int blend_alpha;
	bool overrideDiffuse;
	vec3 diffuseClr;
	bool overrideGlow;
	vec3 glowClr;
	bool overrideSpec;
	vec3 specClr;
	bool alphaGloss;
	bool gammaSpec;
	bool envGloss;
	bool alpha_spec;
	int effect_num;
	float anim_timer;
	float vpwidth;
	float vpheight;
	vec3 base_color;
	vec3 stripe_color;
	bool team_glow_enabled;
};

in float geoInstance[];
in vec3 geoNormal[];
in vec4 geoTexCoord[];
out vec4 fragPosition;
out vec3 fragNormal;
out vec4 fragTexCoord;
#ifdef FLAG_TRANSFORM
in float geoNotVisible[];
out float fragNotVisible;
#endif
#ifdef FLAG_CLIP
in float geoClipDistance[];
out float fragClipDistance;
#endif
void main(void)
{
	int instanceID = int(geoInstance[0]);
   for(int vert = 0; vert < gl_in.length(); vert++)
	{
		gl_Position = shadow_proj_matrix[instanceID] * gl_in[vert].gl_Position;
		if(gl_Position.z < -1.0)
			gl_Position.z = -1.0;
       fragPosition = gl_in[vert].gl_Position;
		fragNormal = geoNormal[vert];
		fragTexCoord = geoTexCoord[vert];
		gl_Layer = instanceID;
#ifdef FLAG_TRANSFORM
		fragNotVisible = geoNotVisible[0];
#endif
#ifdef FLAG_CLIP
		fragClipDistance = geoClipDistance[0];
#endif
		EmitVertex();
	}
	EndPrimitive();
}