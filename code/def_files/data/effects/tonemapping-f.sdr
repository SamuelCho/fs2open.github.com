
#include "gamma.sdr"

in vec4 fragTexCoord;
out vec4 fragOut0;
uniform sampler2D tex;
uniform float exposure;
uniform int algorithm;
vec3 Uncharted2Tonemapping(vec3 hdr_color)
{
	float A = 0.15;
	float B = 0.50;
	float C = 0.10;
	float D = 0.20;
	float E = 0.02;
	float F = 0.30;
	return ((hdr_color*(A*hdr_color+C*B)+D*E)/(hdr_color*(A*hdr_color+B)+D*F))-E/F;
}

vec3 ACESTonemapping(vec3 hdr_color) 
{
    float a = 2.51f;
    float b = 0.03f;
    float c = 2.43f;
    float d = 0.59f;
    float e = 0.14f;

    return (hdr_color * (a * hdr_color + b)) 
         / (hdr_color * (c * hdr_color + d) + e);
}

vec3 ReinhardTonemapping(vec3 hdr_color)
{
	return hdr_color / (hdr_color + vec3(1.0));
}

vec3 Tonemap_Lottes(vec3 x) {
    // Lottes 2016, "Advanced Techniques and Optimization of HDR Color Pipelines"
    float a = 1.6;
    float d = 0.977;
    float hdrMax = 8.0;
    float midIn = 0.18;
    float midOut = 0.267;

    // Can be precomputed
    float b =
        (-pow(midIn, a) + pow(hdrMax, a) * midOut) /
        ((pow(hdrMax, a * d) - pow(midIn, a * d)) * midOut);
    float c =
        (pow(hdrMax, a * d) * pow(midIn, a) - pow(hdrMax, a) * pow(midIn, a * d) * midOut) /
        ((pow(hdrMax, a * d) - pow(midIn, a * d)) * midOut);

    return pow(x, vec3(a)) / (pow(x, vec3(a * d)) * vec3(b) + vec3(c));
}

vec3 ToneMapFilmic_Hejl2015(vec3 hdr, float whitePt)
{
    vec4 vh = vec4(hdr,whitePt);
    vec4 va = (1.425 * vh) + 0.05; //eval filmic curve
    vec4 vf = ((vh * va + 0.004) / ((vh * (va + 0.55) + 0.0491))) - 0.0821;
    return vf.rgb / vf.www; //white point correction
}

float Tonemap_Uchimura(float x, float P, float a, float m, float l, float c, float b) {
    // Uchimura 2017, "HDR theory and practice"
    // Math: https://www.desmos.com/calculator/gslcdxvipg
    // Source: https://www.slideshare.net/nikuque/hdr-theory-and-practicce-jp
    float l0 = ((P - m) * l) / a;
    float L0 = m - m / a;
    float L1 = m + (1.0 - m) / a;
    float S0 = m + l0;
    float S1 = m + a * l0;
    float C2 = (a * P) / (P - S1);
    float CP = -C2 / P;

    float w0 = 1.0 - smoothstep(0.0, m, x);
    float w2 = step(m + l0, x);
    float w1 = 1.0 - w0 - w2;

    float T = m * pow(x / m, c) + b;
    float S = P - (P - S1) * exp(CP * (x - S0));
    float L = m + a * (x - m);

    return T * w0 + L * w1 + S * w2;
}

float Tonemap_Uchimura(float x) {
    const float P = 1.0;  // max display brightness
    const float a = 1.0;  // contrast
    const float m = 0.22; // linear section start
    const float l = 0.4;  // linear section length
    const float c = 1.33; // black
    const float b = 0.0;  // pedestal
    return Tonemap_Uchimura(x, P, a, m, l, c, b);
}

void main()
{
	vec4 color = texture(tex, fragTexCoord.xy);
	// Tone mapping using John Hable's Uncharted 2 tonemapping algorithm.
	float whitepoint = 11.2f; // hardcoded whitepoint value from Hable's algo
	if(algorithm == 0) { color.rgb = Uncharted2Tonemapping(color.rgb * exposure) / Uncharted2Tonemapping(vec3(whitepoint)); }
	else if(algorithm == 1) { color.rgb = ACESTonemapping(color.rgb * exposure); }
	else if(algorithm == 2) { color.rgb = ReinhardTonemapping(color.rgb * exposure); }
	else if(algorithm == 3) { color.rgb = Tonemap_Lottes(color.rgb * exposure); }
	else if(algorithm == 4) { color.rgb = ToneMapFilmic_Hejl2015(color.rgb * exposure, 20.0f); }
	else if(algorithm == 5) { color.rgb = vec3(Tonemap_Uchimura(color.r * exposure), Tonemap_Uchimura(color.g * exposure), Tonemap_Uchimura(color.b * exposure)); }
	else { color.rgb = Uncharted2Tonemapping(color.rgb * exposure) / Uncharted2Tonemapping(vec3(whitepoint)); }
	color.rgb = linear_to_srgb(color.rgb); // return from linear color space to SRGB color space
	fragOut0 = vec4(color.rgb, 1.0);
}
