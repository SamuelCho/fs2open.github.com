
#include "gamma.sdr"

in vec4 fragTexCoord;
out vec4 fragOut0;
uniform sampler2D tex;
uniform float exposure;
uniform int operator;

// http://filmicworlds.com/blog/filmic-tonemapping-operators/
vec3 Uncharted2TonemappingHable(vec3 hdr_color)
{
	float A = 0.15;
	float B = 0.50;
	float C = 0.10;
	float D = 0.20;
	float E = 0.02;
	float F = 0.30;
	return ((hdr_color*(A*hdr_color+C*B)+D*E)/(hdr_color*(A*hdr_color+B)+D*F))-E/F;
}

// https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/
vec3 ACESTonemappingNarkowicz(vec3 hdr_color) 
{
    float a = 2.51f;
    float b = 0.03f;
    float c = 2.43f;
    float d = 0.59f;
    float e = 0.14f;

    return (hdr_color * (a * hdr_color + b)) 
         / (hdr_color * (c * hdr_color + d) + e);
}

// https://github.com/TheRealMJP/BakingLab/blob/master/BakingLab/ACES.hlsl
vec3 ACESTonemappingHill(vec3 color){	
	mat3 m1 = mat3(
        0.59719, 0.07600, 0.02840,
        0.35458, 0.90834, 0.13383,
        0.04823, 0.01566, 0.83777
	);
	mat3 m2 = mat3(
        1.60475, -0.10208, -0.00327,
        -0.53108,  1.10813, -0.07276,
        -0.07367, -0.00605,  1.07602
	);
	vec3 v = m1 * color;    
	vec3 a = v * (v + 0.0245786) - 0.000090537;
	vec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;
	return clamp(m2 * (a / b), 0.0, 1.0);	
}

vec3 TonemappingReinhard(vec3 hdr_color)
{
	return hdr_color / (hdr_color + vec3(1.0));
}

// Lottes 2016, "Advanced Techniques and Optimization of HDR Color Pipelines"
vec3 TonemappingLottes(vec3 x) {
    float a = 1.6;
    float d = 0.977;
    float hdrMax = 8.0;
    float midIn = 0.18;
    float midOut = 0.267;

    // Can be precomputed
    float b =
        (-pow(midIn, a) + pow(hdrMax, a) * midOut) /
        ((pow(hdrMax, a * d) - pow(midIn, a * d)) * midOut);
    float c =
        (pow(hdrMax, a * d) * pow(midIn, a) - pow(hdrMax, a) * pow(midIn, a * d) * midOut) /
        ((pow(hdrMax, a * d) - pow(midIn, a * d)) * midOut);

    return pow(x, vec3(a)) / (pow(x, vec3(a * d)) * vec3(b) + vec3(c));
}

// https://twitter.com/jimhejl/status/633777619998130176
vec3 FilmicTonemappingHejl(vec3 hdr, float whitePt)
{
    vec4 vh = vec4(hdr,whitePt);
    vec4 va = (1.425 * vh) + 0.05f; //eval filmic curve
    vec4 vf = ((vh * va + 0.004f) / ((vh * (va + 0.55f) + 0.0491f))) - 0.0821f;
    return vf.rgb / vf.www; //white point correction
}

// Uchimura 2017, "HDR theory and practice"
// Math: https://www.desmos.com/calculator/gslcdxvipg
// Source: https://www.slideshare.net/nikuque/hdr-theory-and-practicce-jp
float TonemappingUchimura(float x, float P, float a, float m, float l, float c, float b) {
    float l0 = ((P - m) * l) / a;
    float L0 = m - m / a;
    float L1 = m + (1.0 - m) / a;
    float S0 = m + l0;
    float S1 = m + a * l0;
    float C2 = (a * P) / (P - S1);
    float CP = -C2 / P;

    float w0 = 1.0 - smoothstep(0.0, m, x);
    float w2 = step(m + l0, x);
    float w1 = 1.0 - w0 - w2;

    float T = m * pow(x / m, c) + b;
    float S = P - (P - S1) * exp(CP * (x - S0));
    float L = m + a * (x - m);

    return T * w0 + L * w1 + S * w2;
}

float TonemappingUchimura(float x) {
    const float P = 1.0;  // max display brightness
    const float a = 1.0;  // contrast
    const float m = 0.22; // linear section start
    const float l = 0.4;  // linear section length
    const float c = 1.33; // black
    const float b = 0.0;  // pedestal
    return TonemappingUchimura(x, P, a, m, l, c, b);
}

void main()
{
	vec4 color = texture(tex, fragTexCoord.xy);
	if(operator == 0) { color.rgb = ACESTonemappingNarkowicz(color.rgb * exposure); }
	else if(operator == 1) { color.rgb = ACESTonemappingHill(color.rgb * exposure); }
	else if(operator == 2) { color.rgb = TonemappingReinhard(color.rgb * exposure); }
	else if(operator == 3) { color.rgb = TonemappingLottes(color.rgb * exposure); }
	else if(operator == 4) { color.rgb = FilmicTonemappingHejl(color.rgb * exposure, 10.0f); }
	else if(operator == 5) { color.rgb = vec3(TonemappingUchimura(color.r * exposure), TonemappingUchimura(color.g * exposure), TonemappingUchimura(color.b * exposure)); }
	else if(operator == 6) { color.rgb = Uncharted2TonemappingHable(color.rgb * exposure) / Uncharted2TonemappingHable(vec3(11.2f)); }
	else { color.rgb = color.rgb * exposure; }
	color.rgb = linear_to_srgb(color.rgb); // return from linear color space to SRGB color space
	fragOut0 = vec4(color.rgb, 1.0);
}
